fragment CheckoutErrorFragment on CheckoutError {
  message
  field
  code
}

fragment GiftCardFragment on GiftCard {
  displayCode
  id
  currentBalance {
    ...Money
  }
}

fragment ValidationRulesFragment on AddressValidationData {
  addressFormat
  allowedFields
  requiredFields
  countryAreaType
  postalCodeType
  cityType
  countryAreaChoices {
    raw
    verbose
  }
}

fragment PaymentGatewayFragment on PaymentGateway {
  id
  name
  currencies
  config {
    field
    value
  }
}

fragment CheckoutFragment on Checkout {
  id
  email
  discount {
    ...Money
  }
  voucherCode
  discountName
  translatedDiscountName
  giftCards {
    ...GiftCardFragment
  }
  channel {
    id
    slug
  }
  shippingAddress {
    ...AddressFragment
  }
  billingAddress {
    ...AddressFragment
  }
  authorizeStatus
  chargeStatus
  isShippingRequired
  user {
    id
    email
  }
  availablePaymentGateways {
    ...PaymentGatewayFragment
  }
  deliveryMethod {
    ... on ShippingMethod {
      id
    }
    ... on Warehouse {
      id
    }
  }
  shippingMethods {
    id
    name
    price {
      ...Money
    }
    maximumDeliveryDays
    minimumDeliveryDays
  }
  totalPrice {
    gross {
      ...Money
    }
    tax {
      ...Money
    }
  }
  shippingPrice {
    gross {
      ...Money
    }
  }
  subtotalPrice {
    gross {
      ...Money
    }
  }
  lines {
    ...CheckoutLineFragment
  }
  token
  metadata {
    key
    value
  }
}

fragment CheckoutLineFragment on CheckoutLine {
  id
  quantity
  totalPrice {
    gross {
      currency
      amount
    }
  }
  unitPrice {
    gross {
      ...Money
    }
  }
  undiscountedUnitPrice {
    ...Money
  }
  variant {
    attributes(variantSelection: ALL) {
      values {
        name
        dateTime
        boolean
        translation(languageCode: $languageCode) {
          name
        }
      }
    }
    id
    name
    translation(languageCode: $languageCode) {
      name
    }
    product {
      name
      translation(languageCode: $languageCode) {
        language {
          code
        }
        id
        name
      }
      media {
        alt
        type
        url(size: 72)
      }
    }
    media {
      alt
      type
      url(size: 72)
    }
  }
}

fragment AddressFragment on Address {
  id
  city
  phone
  postalCode
  companyName
  cityArea
  streetAddress1
  streetAddress2
  countryArea
  country {
    country
    code
  }
  firstName
  lastName
  vatId
}

query checkout($id: ID!, $languageCode: LanguageCodeEnum!) {
  checkout(id: $id) {
    ...CheckoutFragment
  }
}

query channel($slug: String!) {
  channel(slug: $slug) {
    countries {
      code
    }
  }
}

mutation checkoutLinesUpdate(
  $checkoutId: ID!
  $lines: [CheckoutLineUpdateInput!]!
  $languageCode: LanguageCodeEnum!
) {
  checkoutLinesUpdate(id: $checkoutId, lines: $lines) {
    errors {
      ...CheckoutErrorFragment
    }
    checkout {
      ...CheckoutFragment
    }
  }
}

mutation checkoutLineDelete($checkoutId: ID!, $lineId: ID, $languageCode: LanguageCodeEnum!) {
  checkoutLineDelete(id: $checkoutId, lineId: $lineId) {
    errors {
      ...CheckoutErrorFragment
    }
    checkout {
      ...CheckoutFragment
    }
  }
}

mutation checkoutEmailUpdate($email: String!, $checkoutId: ID!, $languageCode: LanguageCodeEnum!) {
  checkoutEmailUpdate(email: $email, id: $checkoutId) {
    errors {
      ...CheckoutErrorFragment
    }
    checkout {
      ...CheckoutFragment
    }
  }
}

mutation checkoutCustomerAttach($checkoutId: ID!, $languageCode: LanguageCodeEnum!) {
  checkoutCustomerAttach(id: $checkoutId) {
    errors {
      ...CheckoutErrorFragment
    }
    checkout {
      ...CheckoutFragment
    }
  }
}

mutation checkoutShippingAddressUpdate(
  $checkoutId: ID!
  $shippingAddress: AddressInput!
  $validationRules: CheckoutAddressValidationRules
  $languageCode: LanguageCodeEnum!
) {
  checkoutShippingAddressUpdate(
    id: $checkoutId
    shippingAddress: $shippingAddress
    validationRules: $validationRules
  ) {
    errors {
      ...CheckoutErrorFragment
    }
    checkout {
      ...CheckoutFragment
    }
  }
}

mutation checkoutBillingAddressUpdate(
  $checkoutId: ID!
  $billingAddress: AddressInput!
  $validationRules: CheckoutAddressValidationRules
  $languageCode: LanguageCodeEnum!
) {
  checkoutBillingAddressUpdate(
    id: $checkoutId
    billingAddress: $billingAddress
    validationRules: $validationRules
  ) {
    errors {
      ...CheckoutErrorFragment
    }
    checkout {
      ...CheckoutFragment
    }
  }
}

mutation checkoutDeliveryMethodUpdate(
  $checkoutId: ID!
  $deliveryMethodId: ID!
  $languageCode: LanguageCodeEnum!
) {
  checkoutDeliveryMethodUpdate(id: $checkoutId, deliveryMethodId: $deliveryMethodId) {
    errors {
      ...CheckoutErrorFragment
    }
    checkout {
      ...CheckoutFragment
    }
  }
}

query addressValidationRules($countryCode: CountryCode!) {
  addressValidationRules(countryCode: $countryCode) {
    ...ValidationRulesFragment
  }
}

mutation checkoutAddPromoCode(
  $checkoutId: ID
  $promoCode: String!
  $languageCode: LanguageCodeEnum!
) {
  checkoutAddPromoCode(checkoutId: $checkoutId, promoCode: $promoCode) {
    errors {
      ...CheckoutErrorFragment
    }
    checkout {
      ...CheckoutFragment
    }
  }
}

mutation checkoutRemovePromoCode(
  $checkoutId: ID
  $promoCode: String
  $promoCodeId: ID
  $languageCode: LanguageCodeEnum!
) {
  checkoutRemovePromoCode(
    checkoutId: $checkoutId
    promoCode: $promoCode
    promoCodeId: $promoCodeId
  ) {
    errors {
      ...CheckoutErrorFragment
    }
    checkout {
      ...CheckoutFragment
    }
  }
}

mutation checkoutComplete($checkoutId: ID!) {
  checkoutComplete(id: $checkoutId) {
    errors {
      ...CheckoutErrorFragment
    }
    order {
      id
      shippingMethodName
    }
  }
}

mutation checkoutPaymentCreate($checkoutToken: UUID!, $paymentInput: PaymentInput!) {
  checkoutPaymentCreate(token: $checkoutToken, input: $paymentInput) {
    payment {
      id
      total {
        currency
        amount
      }
    }
    errors {
      field
      message
    }
  }
}

mutation UpdateShippingLockerId($checkoutId: ID!, $lockerId: String!) {
  updateMetadata(id: $checkoutId, input: [{ key: "locker_id", value: $lockerId }]) {
    item {
      metadata {
        key
        value
        __typename
      }
      __typename
    }
    __typename
  }
}

mutation updateCheckoutMetadata($checkoutId: ID!, $isInvoice: String!) {
  updateMetadata(id: $checkoutId, input: [{ key: "invoice", value: $isInvoice }]) {
    item {
      metadata {
        key
        value
      }
    }
  }
}
